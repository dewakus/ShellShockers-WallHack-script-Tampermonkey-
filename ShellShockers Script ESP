// ==UserScript==
// @name         Shell Shockers ESP Example
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  Highlight enemies with red ESP boxes in Shell Shockers (educational purposes only)
// @author       Your Name
// @match        *://shellshock.io/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    console.log("[ESP Script] Waiting for game...");

    const waitForGameInterval = setInterval(() => {
        if (window.game) {
            clearInterval(waitForGameInterval);
            console.log("[ESP Script] Game detected. Enabling ESP...");
            enableESP();
        }
    }, 1000);

    function enableESP() {
        const canvas = document.querySelector('canvas');
        const ctx = canvas.getContext('2d');
        const originalRender = window.requestAnimationFrame;

        window.requestAnimationFrame = function (callback) {
            return originalRender.call(this, function () {
                try {
                    renderESP(ctx);
                } catch (e) {
                    console.error("[ESP Script] Error in ESP rendering:", e);
                }
                callback();
            });
        };
    }

    function renderESP(ctx) {
        const players = window.game.players;

        if (!players || players.length === 0) return;

        players.forEach(player => {
            if (player !== window.game.myPlayer && player.team !== window.game.myPlayer.team) {
                drawESPBox(ctx, player);
            }
        });
    }

    function drawESPBox(ctx, player) {
        const canvas = document.querySelector('canvas');
        const { width, height } = canvas;

        const screenPos = worldToScreen(player.x, player.y, player.z, width, height);
        if (!screenPos) return;

        const boxWidth = 50;
        const boxHeight = 100;

        ctx.strokeStyle = "red";
        ctx.lineWidth = 2;

        ctx.beginPath();
        ctx.rect(screenPos.x - boxWidth / 2, screenPos.y - boxHeight / 2, boxWidth, boxHeight);
        ctx.stroke();
        ctx.closePath();
    }

    function worldToScreen(x, y, z, canvasWidth, canvasHeight) {
        const screenX = (x / z) * canvasWidth + canvasWidth / 2;
        const screenY = (y / z) * canvasHeight + canvasHeight / 2;

        if (screenX < 0 || screenX > canvasWidth || screenY < 0 || screenY > canvasHeight) {
            return null; 
        }
        return { x: screenX, y: screenY };
    }
})();
